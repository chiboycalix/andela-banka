{"version":3,"sources":["UserController.js"],"names":["dotenv","config","UserController","request","response","body","email","firstName","lastName","password","i","users","length","status","json","error","salt","bcrypt","genSaltSync","hash","hashSync","user","id","type","isAdmin","push","token","jwt","sign","process","env","SECRET","expiresIn","header","data","login","filter","result","compareSync"],"mappings":"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","file":"UserController.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport users from '../db/users';\n\ndotenv.config();\n\nclass UserController {\n  static signup(request, response) {\n    const {\n      email, firstName, lastName, password,\n    } = request.body;\n    for (let i = 0; i < users.length; i += 1) {\n      if (users[i].email === email) {\n        return response.status(409).json({\n          status: 409,\n          error: 'Email already Exist',\n        });\n      }\n    }\n    const salt = bcrypt.genSaltSync(10);\n    const hash = bcrypt.hashSync(password, salt);\n    const user = {\n      id: users.length + 1,\n      email,\n      firstName,\n      lastName,\n      hash,\n      type: 'staff',\n      isAdmin: true,\n    };\n    users.push(user);\n    const token = jwt.sign({\n      email: user.email,\n      id: user.id,\n      isAdmin: user.isAdmin,\n      type: user.type,\n    }, process.env.SECRET, { expiresIn: '1h' });\n    return response.header('x-access-token', token).status(201).json({\n      status: 201,\n      data: {\n        token,\n        firstName,\n        lastName,\n        email,\n        password: hash,\n        isAdmin: true,\n        type: 'staff',\n      },\n    });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    const login = users.filter(user => user.email === email);\n    if (login.length < 1) {\n      return response.status(404).json({\n        status: 404,\n        error: 'user not found',\n      });\n    }\n    const result = bcrypt.compareSync(password, login[0].hash);\n    if (result) {\n      const token = jwt.sign({\n        email: login[0].email,\n        id: login[0].id,\n        isAdmin: login[0].isAdmin,\n        type: login[0].type,\n      }, process.env.SECRET, { expiresIn: '1h' });\n      return response.status(200).json({\n        status: 200,\n        data: {\n          token,\n          firstName: login[0].firstName,\n          lastName: login[0].lastName,\n          email: login[0].email,\n          password: login[0].hash,\n        },\n      });\n    }\n    return response.status(400).json({\n      error: 'password invalid',\n    });\n  }\n}\n\nexport default UserController;\n"]}