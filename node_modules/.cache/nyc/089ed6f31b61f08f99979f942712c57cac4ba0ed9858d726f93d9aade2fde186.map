{"version":3,"sources":["transactionTests.js"],"names":["dotenv","config","should","chai","use","chaiHttp","describe","it","equal","staff","firstName","lastName","email","password","type","isAdmin","staffToken","jwt","sign","id","process","env","SECRET","expiresIn","done","request","server","post","send","end","response","have","status","body","be","a","property","data","account","accountNumber","createdOn","owner","balance","debitedAccount","set","err"],"mappings":"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","file":"transactionTests.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/test/userTests","sourcesContent":["/* eslint-disable no-unused-expressions */\n// eslint-disable-next-line no-unused-expressions\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport server from '../../app';\n\ndotenv.config();\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\ndescribe('Demo test', () => {\n  it('This is demo test and actually tests nothing', () => {\n    ('one').should.equal('one');\n  });\n});\n\ndescribe('Demo test', () => {\n  const staff = {\n    firstName: 'chinonso',\n    lastName: 'calix',\n    email: 'staff2@gmail.com',\n    password: 1234,\n    type: 'staff',\n    isAdmin: true,\n  };\n  const staffToken = jwt.sign({\n    email: staff.email,\n    id: staff.id,\n    isAdmin: staff.isAdmin,\n    type: staff.type,\n  }, process.env.SECRET, { expiresIn: '1h' });\n  it('should be able to signup a staff with the correct details', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', staffToken)\n      .send(staff)\n      .end((request, response) => {\n        response.should.have.status(201);\n        response.body.should.be.a('object');\n        response.body.should.have.property('data');\n        response.body.data.should.have.property('token');\n        response.body.data.should.have.property('firstName');\n        response.body.data.should.have.property('lastName');\n        response.body.data.should.have.property('email');\n        response.body.data.should.have.property('password');\n        response.body.data.should.have.property('type');\n        response.body.data.should.have.property('isAdmin');\n        done();\n      });\n  });\n  const account = {\n    id: 1,\n    accountNumber: '0114276912',\n    createdOn: '12/12/2009',\n    owner: 1,\n    type: 'savings',\n    status: 'active',\n    balance: 50000.32,\n  };\n  const debitedAccount = {\n    id: account.id,\n    accountNumber: account.accountNumber,\n    createdOn: account.createdOn,\n    owner: account.owner,\n    type: account.type,\n    status: account.status,\n    balance: 500.32,\n  };\n  it('Only a staff can perform the debit operation', (done) => {\n    chai.request(server)\n      .post('/api/v1/transactions/0114276912/debit')\n      .send(debitedAccount)\n      .set('Authorization', `Bearer ${staffToken}`)\n      .end((err, response) => {\n        response.should.have.status(200);\n      });\n    done();\n  });\n});\n"]}