{"version":3,"sources":["loginTests.js"],"names":["dotenv","config","should","chai","use","chaiHttp","describe","login","email","password","it","done","request","server","post","send","end","response","have","status","body","property","noEmail","error","equal","noPassword","invalidEmail"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AALA;AACA;AAMAA,iBAAOC,MAAP;AACA;AACA,IAAMC,SAASC,eAAKD,MAAL,EAAf;;AAEAC,eAAKC,GAAL,CAASC,kBAAT;;AAEAC,SAAS,yBAAT,EAAoC,YAAM;AACxC,MAAMC,QAAQ;AACZC,WAAO,eADK;AAEZC,cAAU;AAFE,GAAd;AAIAC,KAAG,iDAAH,EAAsD,UAACC,IAAD,EAAU;AAC9DR,mBAAKS,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQR,KAFR,EAGGS,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASf,MAAT,CAAgBgB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAclB,MAAd,CAAqBgB,IAArB,CAA0BG,QAA1B,CAAmC,MAAnC;AACAV;AACD,KAPH;AAQD,GATD;AAUA,MAAMW,UAAU;AACdd,WAAO,EADO;AAEdC,cAAU;AAFI,GAAhB;AAIAC,KAAG,8BAAH,EAAmC,UAACC,IAAD,EAAU;AAC3CR,mBAAKS,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQO,OAFR,EAGGN,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASf,MAAT,CAAgBgB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAclB,MAAd,CAAqBgB,IAArB,CAA0BG,QAA1B,CAAmC,OAAnC;AACAJ,eAASG,IAAT,CAAcG,KAAd,CAAoBrB,MAApB,CAA2BsB,KAA3B,CAAiC,mBAAjC;AACAb;AACD,KARH;AASD,GAVD;AAWA,MAAMc,aAAa;AACjBjB,WAAO,eADU;AAEjBC,cAAU;AAFO,GAAnB;AAIAC,KAAG,gCAAH,EAAqC,UAACC,IAAD,EAAU;AAC7CR,mBAAKS,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQU,UAFR,EAGGT,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASf,MAAT,CAAgBgB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAclB,MAAd,CAAqBgB,IAArB,CAA0BG,QAA1B,CAAmC,OAAnC;AACAJ,eAASG,IAAT,CAAcG,KAAd,CAAoBrB,MAApB,CAA2BsB,KAA3B,CAAiC,+BAAjC;AACAb;AACD,KARH;AASD,GAVD;AAWA,MAAMe,eAAe;AACnBlB,WAAO,cADY;AAEnBC,cAAU;AAFS,GAArB;AAIAC,KAAG,mCAAH,EAAwC,UAACC,IAAD,EAAU;AAChDR,mBAAKS,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQW,YAFR,EAGGV,GAHH,CAGO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAASf,MAAT,CAAgBgB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAclB,MAAd,CAAqBgB,IAArB,CAA0BG,QAA1B,CAAmC,OAAnC;AACAJ,eAASG,IAAT,CAAcG,KAAd,CAAoBrB,MAApB,CAA2BsB,KAA3B,CAAiC,8BAAjC;AACAb;AACD,KARH;AASD,GAVD;AAWD,CA5DD","file":"loginTests.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/test/userTests","sourcesContent":["/* eslint-disable no-unused-expressions */\n// eslint-disable-next-line no-unused-expressions\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\nimport server from '../../app';\n\ndotenv.config();\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\ndescribe('POST /api/v1/auth/login', () => {\n  const login = {\n    email: 'deb@gmail.com',\n    password: '1234',\n  };\n  it('it should login a user with correct credentials', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(login)\n      .end((request, response) => {\n        response.should.have.status(200);\n        response.body.should.have.property('data');\n        done();\n      });\n  });\n  const noEmail = {\n    email: '',\n    password: '1234',\n  };\n  it('user should provide an email', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(noEmail)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('email is required');\n        done();\n      });\n  });\n  const noPassword = {\n    email: 'deb@gmail.com',\n    password: '',\n  };\n  it('user should provide a password', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(noPassword)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('password is required to login');\n        done();\n      });\n  });\n  const invalidEmail = {\n    email: 'debgmail.com',\n    password: '1234',\n  };\n  it('user should provide a valid email', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/login')\n      .send(invalidEmail)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('Please provide a valid email');\n        done();\n      });\n  });\n});\n"]}