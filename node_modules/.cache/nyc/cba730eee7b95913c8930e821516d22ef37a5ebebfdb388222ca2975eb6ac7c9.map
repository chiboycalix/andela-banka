{"version":3,"sources":["transactionTests.js"],"names":["dotenv","config","should","chai","use","chaiHttp","describe","staff","firstName","lastName","email","password","type","isAdmin","staffToken","jwt","sign","id","process","env","SECRET","expiresIn","it","done","request","server","post","send","end","response","have","status","body","be","a","property","data","debitTransaction","accountNumber","createdOn","cashier","transactionType","amount","oldBalance","newBalance","set","err","creditTransaction","get","invalidTransaction","error","equal"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;AACA;AATA;AACA;AASA,IAAMC,SAASC,eAAKD,MAAL,EAAf;;AAEAC,eAAKC,GAAL,CAASC,kBAAT;;AAGAC,SAAS,uBAAT,EAAkC,YAAM;AACtC,MAAMC,QAAQ;AACZC,eAAW,UADC;AAEZC,cAAU,OAFE;AAGZC,WAAO,kBAHK;AAIZC,cAAU,IAJE;AAKZC,UAAM,OALM;AAMZC,aAAS;AANG,GAAd;AAQA,MAAMC,aAAaC,uBAAIC,IAAJ,CAAS;AAC1BN,WAAOH,MAAMG,KADa;AAE1BO,QAAIV,MAAMU,EAFgB;AAG1BJ,aAASN,MAAMM,OAHW;AAI1BD,UAAML,MAAMK;AAJc,GAAT,EAKhBM,QAAQC,GAAR,CAAYC,MALI,EAKI,EAAEC,WAAW,IAAb,EALJ,CAAnB;AAMAC,KAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACxEpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,gBAFR,EAE0Bb,UAF1B,EAGGa,IAHH,CAGQpB,KAHR,EAIGqB,GAJH,CAIO,UAACJ,OAAD,EAAUK,QAAV,EAAuB;AAC1BA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAc9B,MAAd,CAAqB+B,EAArB,CAAwBC,CAAxB,CAA0B,QAA1B;AACAL,eAASG,IAAT,CAAc9B,MAAd,CAAqB4B,IAArB,CAA0BK,QAA1B,CAAmC,MAAnC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,OAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,WAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,UAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,OAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,UAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,MAAxC;AACAN,eAASG,IAAT,CAAcI,IAAd,CAAmBlC,MAAnB,CAA0B4B,IAA1B,CAA+BK,QAA/B,CAAwC,SAAxC;AACAZ;AACD,KAhBH;AAiBD,GAlBD;AAmBA,MAAMc,mBAAmB;AACvBpB,QAAI,CADmB;AAEvBqB,mBAAe,YAFQ;AAGvBC,eAAW,YAHY;AAIvBC,aAAS,CAJc;AAKvBC,qBAAiB,OALM;AAMvBC,YAAQ,GANe;AAOvBC,gBAAY,KAPW;AAQvBC,gBAAY;AARW,GAAzB;AAUAtB,KAAG,8CAAH,EAAmD,UAACC,IAAD,EAAU;AAC3DpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,uCADR,EAEGC,IAFH,CAEQU,gBAFR,EAGGQ,GAHH,CAGO,eAHP,cAGkC/B,UAHlC,EAIGc,GAJH,CAIO,UAACkB,GAAD,EAAMjB,QAAN,EAAmB;AACtBA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACD,KANH;AAOAR;AACD,GATD;AAUA,MAAMwB,oBAAoB;AACxB9B,QAAI,CADoB;AAExBqB,mBAAe,YAFS;AAGxBC,eAAW,YAHa;AAIxBC,aAAS,CAJe;AAKxBC,qBAAiB,OALO;AAMxBC,YAAQ,GANgB;AAOxBC,gBAAY,KAPY;AAQxBC,gBAAY;AARY,GAA1B;AAUAtB,KAAG,8CAAH,EAAmD,UAACC,IAAD,EAAU;AAC3DpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,wCADR,EAEGC,IAFH,CAEQoB,iBAFR,EAGGF,GAHH,CAGO,eAHP,cAGkC/B,UAHlC,EAIGc,GAJH,CAIO,UAACkB,GAAD,EAAMjB,QAAN,EAAmB;AACtBA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACD,KANH;AAOAR;AACD,GATD;;AAWAD,KAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACxEpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGuB,GADH,CACO,8CADP,EAEGpB,GAFH,CAEO,UAACkB,GAAD,EAAMjB,QAAN,EAAmB;AACtBA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACD,KAJH;AAKAR;AACD,GAPD;AAQAD,KAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACxEpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGuB,GADH,CACO,gDADP,EAEGpB,GAFH,CAEO,UAACkB,GAAD,EAAMjB,QAAN,EAAmB;AACtBA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACD,KAJH;AAKAR;AACD,GAPD;;AASA,MAAM0B,qBAAqB;AACzBhC,QAAI,CADqB;AAEzBqB,mBAAe,YAFU;AAGzBC,eAAW,YAHc;AAIzBC,aAAS,CAJgB;AAKzBC,qBAAiB,OALQ;AAMzBC,YAAQ,KANiB;AAOzBC,gBAAY,KAPa;AAQzBC,gBAAY;AARa,GAA3B;;AAWAtB,KAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACxEpB,mBAAKqB,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,uCADR,EAEGmB,GAFH,CAEO,eAFP,cAEkC/B,UAFlC,EAGGa,IAHH,CAGQsB,kBAHR,EAIGrB,GAJH,CAIO,UAACkB,GAAD,EAAMjB,QAAN,EAAmB;AACtBA,eAAS3B,MAAT,CAAgB4B,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;AACAF,eAASG,IAAT,CAAc9B,MAAd,CAAqB4B,IAArB,CAA0BK,QAA1B,CAAmC,OAAnC;AACAN,eAASG,IAAT,CAAckB,KAAd,CAAoBhD,MAApB,CAA2BiD,KAA3B,CAAiC,sBAAjC;AACD,KARH;AASA5B;AACD,GAXD;AAYD,CAnHD","file":"transactionTests.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/test/userTests","sourcesContent":["/* eslint-disable no-unused-expressions */\n// eslint-disable-next-line no-unused-expressions\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport server from '../../app';\n\ndotenv.config();\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\n\ndescribe('All transactions test', () => {\n  const staff = {\n    firstName: 'chinonso',\n    lastName: 'calix',\n    email: 'staff2@gmail.com',\n    password: 1234,\n    type: 'staff',\n    isAdmin: true,\n  };\n  const staffToken = jwt.sign({\n    email: staff.email,\n    id: staff.id,\n    isAdmin: staff.isAdmin,\n    type: staff.type,\n  }, process.env.SECRET, { expiresIn: '1h' });\n  it('should be able to signup a staff with the correct details', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', staffToken)\n      .send(staff)\n      .end((request, response) => {\n        response.should.have.status(201);\n        response.body.should.be.a('object');\n        response.body.should.have.property('data');\n        response.body.data.should.have.property('token');\n        response.body.data.should.have.property('firstName');\n        response.body.data.should.have.property('lastName');\n        response.body.data.should.have.property('email');\n        response.body.data.should.have.property('password');\n        response.body.data.should.have.property('type');\n        response.body.data.should.have.property('isAdmin');\n        done();\n      });\n  });\n  const debitTransaction = {\n    id: 1,\n    accountNumber: '0114276910',\n    createdOn: '12/12/2009',\n    cashier: 1,\n    transactionType: 'debit',\n    amount: 500,\n    oldBalance: 15000,\n    newBalance: 10000,\n  };\n  it('Only a staff can perform the debit operation', (done) => {\n    chai.request(server)\n      .post('/api/v1/transactions/0114276912/debit')\n      .send(debitTransaction)\n      .set('Authorization', `Bearer ${staffToken}`)\n      .end((err, response) => {\n        response.should.have.status(201);\n      });\n    done();\n  });\n  const creditTransaction = {\n    id: 1,\n    accountNumber: '0114276910',\n    createdOn: '12/12/2009',\n    cashier: 1,\n    transactionType: 'debit',\n    amount: 500,\n    oldBalance: 15000,\n    newBalance: 20000,\n  };\n  it('Only a staff can perform the debit operation', (done) => {\n    chai.request(server)\n      .post('/api/v1/transactions/0114276912/credit')\n      .send(creditTransaction)\n      .set('Authorization', `Bearer ${staffToken}`)\n      .end((err, response) => {\n        response.should.have.status(201);\n      });\n    done();\n  });\n\n  it('Only a staff or logged in user can perform this operation', (done) => {\n    chai.request(server)\n      .get('/api/v1/transactions/0114276912/transactions')\n      .end((err, response) => {\n        response.should.have.status(200);\n      });\n    done();\n  });\n  it('Only a staff or logged in user can perform this operation', (done) => {\n    chai.request(server)\n      .get('/api/v1/transactions/0114276912/transactions/2')\n      .end((err, response) => {\n        response.should.have.status(200);\n      });\n    done();\n  });\n\n  const invalidTransaction = {\n    id: 1,\n    accountNumber: '0114276910',\n    createdOn: '12/12/2009',\n    cashier: 1,\n    transactionType: 'debit',\n    amount: 25000,\n    oldBalance: 15000,\n    newBalance: 10000,\n  };\n\n  it('Only a staff or logged in user can perform this operation', (done) => {\n    chai.request(server)\n      .post('/api/v1/transactions/0114276912/debit')\n      .set('Authorization', `Bearer ${staffToken}`)\n      .send(invalidTransaction)\n      .end((err, response) => {\n        response.should.have.status(403);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('Insufficient Balance');\n      });\n    done();\n  });\n});\n"]}