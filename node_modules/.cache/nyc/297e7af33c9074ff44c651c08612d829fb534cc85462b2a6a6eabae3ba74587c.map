{"version":3,"sources":["AccountController.js"],"names":["AccountController","request","response","body","type","balance","id","userData","accountNumber","Math","random","toString","slice","account","accounts","length","owner","createdOn","Date","status","push","i","users","json","data","firstName","lastName","email","parseFloat","toFixed","accountNum","params","userId","splice","message"],"mappings":"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","file":"AccountController.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/controllers","sourcesContent":["/* eslint-disable no-restricted-globals */\r\nimport accounts from '../db/accounts';\r\nimport users from '../db/users';\r\n\r\n\r\nclass AccountController {\r\n  static createAccount(request, response) {\r\n    const { type, balance } = request.body;\r\n    const { id } = request.userData;\r\n    const accountNumber = Math.random().toString().slice(2, 12);\r\n    const account = {\r\n      id: accounts.length + 1,\r\n      accountNumber,\r\n      owner: id,\r\n      createdOn: new Date(),\r\n      status: 'active',\r\n      type,\r\n      balance,\r\n    };\r\n    accounts.push(account);\r\n    for (let i = 0; i < users.length; i += 1) {\r\n      if (users[i].id === id) {\r\n        return response.status(201).json({\r\n          status: 201,\r\n          data: {\r\n            accountNumber: account.accountNumber,\r\n            firstName: users[i].firstName,\r\n            lastName: users[i].lastName,\r\n            email: users[i].email,\r\n            type: account.type,\r\n            createdOn: account.createdOn,\r\n            balance: parseFloat(balance, 10).toFixed(2),\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  static patchAccount(request, response) {\r\n    const { accountNum } = request.params;\r\n    const { status } = request.body;\r\n    for (let i = 0; i < accounts.length; i += 1) {\r\n      if (accounts[i].accountNumber === accountNum) {\r\n        accounts[i].status = status;\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: {\r\n            accountNumber: accountNum,\r\n            status,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  static getAccount(request, response) {\r\n    const { accountNum } = request.params;\r\n    const { id } = request.userData;\r\n    for (let i = 0; i < accounts.length; i += 1) {\r\n      if (accounts[i].accountNumber === accountNum) {\r\n        return response.status(200).json({\r\n          status: 200,\r\n          data: {\r\n            userId: id,\r\n            accountNum,\r\n            status: accounts[i].status,\r\n            balance: accounts[i].balance,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  static getAccounts(request, response) {\r\n    return response.status(200).json({\r\n      status: 200,\r\n      data: accounts,\r\n    });\r\n  }\r\n\r\n  static deleteAccount(request, response) {\r\n    const { accountNum } = request.params;\r\n    for (let i = 0; i < accounts.length; i += 1) {\r\n      if (accounts[i].accountNumber === accountNum) {\r\n        accounts.splice(accounts[i].id - 1, 1);\r\n        return response.status(200).json({\r\n          status: 200,\r\n          message: 'Account successfully deleted',\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default AccountController;\r\n"]}