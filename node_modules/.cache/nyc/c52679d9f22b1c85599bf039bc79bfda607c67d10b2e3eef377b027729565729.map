{"version":3,"sources":["TransactionController.js"],"names":["TransactionController","request","response","accountNum","params","body","amount","transactionType","id","userData","i","accounts","length","accountNumber","oldBalance","balance","transaction","transactionId","transactions","createdOn","Date","cashier","newBalance","push","status","json","data","accountBalance","getFullYear","filter","transac"],"mappings":"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","file":"TransactionController.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/controllers","sourcesContent":["import accounts from '../db/accounts';\nimport transactions from '../db/transactions';\n\nclass TransactionController {\n  static creditAccount(request, response) {\n    const { accountNum } = request.params;\n    const { amount, transactionType } = request.body;\n    const { id } = request.userData;\n    for (let i = 0; i < accounts.length; i += 1) {\n      if (accounts[i].accountNumber === accountNum) {\n        let oldBalance = accounts[i].balance;\n        const transaction = {\n          transactionId: transactions.length + 1,\n          createdOn: new Date(),\n          cashier: id,\n          amount,\n          accountNumber: accounts[i].accountNumber,\n          oldBalance,\n          newBalance: oldBalance += amount,\n        };\n        accounts[i].balance = transaction.newBalance;\n        transactions.push(transaction);\n        return response.status(201).json({\n          status: 201,\n          data: {\n            transactionId: transaction.transactionId,\n            accountNumber: accountNum,\n            amount,\n            transactionType,\n            accountBalance: transaction.newBalance,\n          },\n        });\n      }\n    }\n  }\n\n  static debitAccount(request, response) {\n    const { accountNum } = request.params;\n    const { amount, transactionType } = request.body;\n    const { id } = request.userData;\n    for (let i = 0; i < accounts.length; i += 1) {\n      if (accounts[i].accountNumber === accountNum) {\n        let oldBalance = accounts[i].balance;\n        const transaction = {\n          transactionId: transactions.length + 1,\n          createdOn: new Date().getFullYear,\n          cashier: id,\n          amount,\n          accountNumber: accounts[i].accountNumber,\n          oldBalance,\n          newBalance: oldBalance -= amount,\n        };\n        accounts[i].balance = transaction.newBalance;\n        transactions.push(transaction);\n        return response.status(201).json({\n          status: 201,\n          data: {\n            transactionId: transaction.transactionId,\n            accountNumber: accountNum,\n            amount,\n            transactionType,\n            accountBalance: transaction.newBalance,\n          },\n        });\n      }\n    }\n  }\n\n  static getAllTransactions(request, response) {\n    const { accountNum } = request.params;\n    const transaction = transactions.filter(transac => transac.accountNumber === accountNum);\n    return response.status(200).json({\n      status: 200,\n      data: transaction,\n    });\n  }\n\n  static getTransaction(request, response) {\n    const { transactionId } = request.params;\n    const transaction = transactions.filter(transac => transac.id === transactionId);\n    return response.status(200).json({\n      status: 200,\n      data: transaction[0],\n    });\n  }\n}\n\nexport default TransactionController;\n"]}