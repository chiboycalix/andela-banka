{"version":3,"sources":["UserController.js"],"names":["dotenv","config","UserController","request","response","body","email","firstName","lastName","password","i","users","length","status","json","error","bcrypt","hash","user","id","type","isAdmin","push","token","jwt","sign","process","env","SECRET","expiresIn","header","data"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAA,iBAAOC,MAAP;;IAEMC,c;;;;;;;2BACUC,O,EAASC,Q,EAAU;AAAA,0BAG3BD,QAAQE,IAHmB;AAAA,UAE7BC,KAF6B,iBAE7BA,KAF6B;AAAA,UAEtBC,SAFsB,iBAEtBA,SAFsB;AAAA,UAEXC,QAFW,iBAEXA,QAFW;AAAA,UAEDC,QAFC,iBAEDA,QAFC;;AAI/B,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,gBAAMC,MAA1B,EAAkCF,KAAK,CAAvC,EAA0C;AACxC,YAAIC,gBAAMD,CAAN,EAASJ,KAAT,KAAmBA,KAAvB,EAA8B;AAC5B,iBAAOF,SAASS,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,oBAAQ,GADuB;AAE/BE,mBAAO;AAFwB,WAA1B,CAAP;AAID;AACF;AACDC,uBAAOC,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,EAA0B,UAACM,KAAD,EAAQE,IAAR,EAAiB;AACzC,YAAIF,KAAJ,EAAW;AACT,iBAAOX,SAASS,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BD,oBAAQ,GADuB;AAE/BE;AAF+B,WAA1B,CAAP;AAID;AACD,YAAMG,OAAO;AACXC,cAAIR,gBAAMC,MAAN,GAAe,CADR;AAEXN,sBAFW;AAGXC,8BAHW;AAIXC,4BAJW;AAKXC,4BALW;AAMXW,gBAAM,OANK;AAOXC,mBAAS;AAPE,SAAb;AASAV,wBAAMW,IAAN,CAAWJ,IAAX;AACA,YAAMK,QAAQC,uBAAIC,IAAJ,CAAS;AACrBnB,iBAAOY,KAAKZ,KADS;AAErBa,cAAID,KAAKC,EAFY;AAGrBE,mBAASH,KAAKG,OAHO;AAIrBD,gBAAMF,KAAKE;AAJU,SAAT,EAKXM,QAAQC,GAAR,CAAYC,MALD,EAKS,EAAEC,WAAW,IAAb,EALT,CAAd;AAMA,eAAOzB,SAAS0B,MAAT,CAAgB,gBAAhB,EAAkCP,KAAlC,EAAyCV,MAAzC,CAAgD,GAAhD,EAAqDC,IAArD,CAA0D;AAC/DD,kBAAQ,GADuD;AAE/DkB,gBAAM;AACJR,wBADI;AAEJhB,gCAFI;AAGJC,8BAHI;AAIJF,wBAJI;AAKJG,sBAAUQ,IALN;AAMJI,qBAAS,IANL;AAOJD,kBAAM;AAPF;AAFyD,SAA1D,CAAP;AAYD,OAnCD;AAoCD;;;0BAEYjB,O,EAASC,Q,EAAU;AAAA,2BACFD,QAAQE,IADN;AAAA,UACtBC,KADsB,kBACtBA,KADsB;AAAA,UACfG,QADe,kBACfA,QADe;;AAE9B,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,gBAAMC,MAA1B,EAAkCF,KAAK,CAAvC,EAA0C;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;;;;;kBAGYR,c","file":"UserController.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport users from '../db/users';\n\ndotenv.config();\n\nclass UserController {\n  static signup(request, response) {\n    const {\n      email, firstName, lastName, password,\n    } = request.body;\n    for (let i = 0; i < users.length; i += 1) {\n      if (users[i].email === email) {\n        return response.status(409).json({\n          status: 409,\n          error: 'Email already Exist',\n        });\n      }\n    }\n    bcrypt.hash(password, 10, (error, hash) => {\n      if (error) {\n        return response.status(500).json({\n          status: 500,\n          error,\n        });\n      }\n      const user = {\n        id: users.length + 1,\n        email,\n        firstName,\n        lastName,\n        password,\n        type: 'staff',\n        isAdmin: true,\n      };\n      users.push(user);\n      const token = jwt.sign({\n        email: user.email,\n        id: user.id,\n        isAdmin: user.isAdmin,\n        type: user.type,\n      }, process.env.SECRET, { expiresIn: '1h' });\n      return response.header('x-access-token', token).status(201).json({\n        status: 201,\n        data: {\n          token,\n          firstName,\n          lastName,\n          email,\n          password: hash,\n          isAdmin: true,\n          type: 'staff',\n        },\n      });\n    });\n  }\n\n  static login(request, response) {\n    const { email, password } = request.body;\n    for (let i = 0; i < users.length; i += 1) {\n      // if (users[i].email === email && users[i].password === password) {\n      //   const token = jwt.sign({\n      //     email: users[i].email,\n      //     id: users[i].id,\n      //     isAdmin: users[i].isAdmin,\n      //     type: users[i].type,\n      //   }, process.env.SECRET, { expiresIn: '1h' });\n      //   return response.header('x-access-token', token).status(200).json({\n      //     status: 200,\n      //     data: {\n      //       token,\n      //       id: users[i].id,\n      //       firstName: users[i].firstName,\n      //       lastName: users[i].lastName,\n      //       email,\n      //       type: users[i].type,\n      //       isAdmin: users[i].isAdmin,\n      //     },\n      //   });\n      // }\n    }\n  }\n}\n\nexport default UserController;\n"]}