{"version":3,"sources":["AccountController.js"],"names":["AccountController","request","response","body","type","balance","id","userData","accountNumber","Math","random","toString","slice","account","accounts","length","owner","createdOn","Date","status","push","i","users","json","data","parseInt","firstName","lastName","email","parseFloat","toFixed","accountNum","params","userId","splice","message"],"mappings":"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","file":"AccountController.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/controllers","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport accounts from '../db/accounts';\nimport users from '../db/users';\n\n\nclass AccountController {\n  static createAccount(request, response) {\n    const { type, balance } = request.body;\n    const { id } = request.userData;\n    const accountNumber = Math.random().toString().slice(2, 12);\n    const account = {\n      id: accounts.length + 1,\n      accountNumber,\n      owner: id,\n      createdOn: new Date(),\n      status: 'active',\n      type,\n      balance,\n    };\n    accounts.push(account);\n    for (let i = 0; i < users.length; i += 1) {\n      if (users[i].id === id) {\n        return response.status(201).json({\n          status: 201,\n          data: {\n            accountNumber: parseInt(account.accountNumber, 10),\n            firstName: users[i].firstName,\n            lastName: users[i].lastName,\n            email: users[i].email,\n            type: account.type,\n            createdOn: account.createdOn,\n            balance: parseFloat(balance, 10).toFixed(2),\n          },\n        });\n      }\n    }\n  }\n\n  static patchAccount(request, response) {\n    const { accountNum } = request.params;\n    const { status } = request.body;\n    for (let i = 0; i < accounts.length; i += 1) {\n      if (accounts[i].accountNumber === accountNum) {\n        accounts[i].status = status;\n        return response.status(200).json({\n          status: 200,\n          data: {\n            accountNumber: accountNum,\n            status,\n          },\n        });\n      }\n    }\n  }\n\n  static getAccount(request, response) {\n    const { accountNum } = request.params;\n    const { id } = request.userData;\n    for (let i = 0; i < accounts.length; i += 1) {\n      if (accounts[i].accountNumber === accountNum) {\n        return response.status(200).json({\n          status: 200,\n          data: {\n            userId: id,\n            accountNum,\n            status: accounts[i].status,\n            balance: accounts[i].balance,\n          },\n        });\n      }\n    }\n  }\n\n  static getAccounts(request, response) {\n    return response.status(200).json({\n      status: 200,\n      data: accounts,\n    });\n  }\n\n  static deleteAccount(request, response) {\n    const { accountNum } = request.params;\n    for (let i = 0; i < accounts.length; i += 1) {\n      if (accounts[i].accountNumber === accountNum) {\n        accounts.splice(accounts[i].id - 1, 1);\n        return response.status(200).json({\n          status: 200,\n          message: 'Account successfully deleted',\n        });\n      }\n    }\n  }\n}\n\nexport default AccountController;\n"]}