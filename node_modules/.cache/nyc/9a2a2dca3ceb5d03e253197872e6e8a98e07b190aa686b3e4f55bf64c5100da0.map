{"version":3,"sources":["transactionTest.js"],"names":["dotenv","config","should","chai","use","chaiHttp","describe","staff","firstName","lastName","email","password","type","isAdmin","staffToken","jwt","sign","id","process","env","SECRET","expiresIn","it","done","request","server","post","send","end","response","have","status","body","be","a","property","data","debitTransaction","accountNumber","createdOn","cashier","transactionType","amount","oldBalance","newBalance","set","err","creditTransaction","get","invalidTransaction","error","equal"],"mappings":"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","file":"transactionTest.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/test/userTests","sourcesContent":["/* eslint-disable no-unused-expressions */\r\n// eslint-disable-next-line no-unused-expressions\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport server from '../../app';\r\n\r\ndotenv.config();\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\n\r\nchai.use(chaiHttp);\r\n\r\n\r\ndescribe('All transactions test', () => {\r\n  const staff = {\r\n    firstName: 'chinonso',\r\n    lastName: 'calix',\r\n    email: 'staff2@gmail.com',\r\n    password: 1234,\r\n    type: 'staff',\r\n    isAdmin: true,\r\n  };\r\n  const staffToken = jwt.sign({\r\n    email: staff.email,\r\n    id: staff.id,\r\n    isAdmin: staff.isAdmin,\r\n    type: staff.type,\r\n  }, process.env.SECRET, { expiresIn: '1h' });\r\n  it('should be able to signup a staff with the correct details', (done) => {\r\n    chai.request(server)\r\n      .post('/api/v1/auth/signup')\r\n      .send('x-access-token', staffToken)\r\n      .send(staff)\r\n      .end((request, response) => {\r\n        response.should.have.status(201);\r\n        response.body.should.be.a('object');\r\n        response.body.should.have.property('data');\r\n        response.body.data.should.have.property('token');\r\n        response.body.data.should.have.property('firstName');\r\n        response.body.data.should.have.property('lastName');\r\n        response.body.data.should.have.property('email');\r\n        response.body.data.should.have.property('password');\r\n        response.body.data.should.have.property('type');\r\n        response.body.data.should.have.property('isAdmin');\r\n        done();\r\n      });\r\n  });\r\n  const debitTransaction = {\r\n    id: 1,\r\n    accountNumber: '0114276910',\r\n    createdOn: '12/12/2009',\r\n    cashier: 1,\r\n    transactionType: 'debit',\r\n    amount: 500,\r\n    oldBalance: 15000,\r\n    newBalance: 10000,\r\n  };\r\n  it('Only a staff can perform the debit operation', (done) => {\r\n    chai.request(server)\r\n      .post('/api/v1/transactions/0114276912/debit')\r\n      .send(debitTransaction)\r\n      .set('Authorization', `Bearer ${staffToken}`)\r\n      .end((err, response) => {\r\n        response.should.have.status(201);\r\n      });\r\n    done();\r\n  });\r\n  const creditTransaction = {\r\n    id: 1,\r\n    accountNumber: '0114276910',\r\n    createdOn: '12/12/2009',\r\n    cashier: 1,\r\n    transactionType: 'debit',\r\n    amount: 500,\r\n    oldBalance: 15000,\r\n    newBalance: 20000,\r\n  };\r\n  it('Only a staff can perform the debit operation', (done) => {\r\n    chai.request(server)\r\n      .post('/api/v1/transactions/0114276912/credit')\r\n      .send(creditTransaction)\r\n      .set('Authorization', `Bearer ${staffToken}`)\r\n      .end((err, response) => {\r\n        response.should.have.status(201);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('Only a staff or logged in user can perform this operation', (done) => {\r\n    chai.request(server)\r\n      .get('/api/v1/transactions/0114276912/transactions')\r\n      .end((err, response) => {\r\n        response.should.have.status(200);\r\n      });\r\n    done();\r\n  });\r\n  it('Only a staff or logged in user can perform this operation', (done) => {\r\n    chai.request(server)\r\n      .get('/api/v1/transactions/0114276912/transactions/2')\r\n      .end((err, response) => {\r\n        response.should.have.status(200);\r\n      });\r\n    done();\r\n  });\r\n\r\n  const invalidTransaction = {\r\n    id: 1,\r\n    accountNumber: '0114276910',\r\n    createdOn: '12/12/2009',\r\n    cashier: 1,\r\n    transactionType: 'debit',\r\n    amount: 25000,\r\n    oldBalance: 15000,\r\n    newBalance: 10000,\r\n  };\r\n\r\n  it('Only a staff or logged in user can perform this operation', (done) => {\r\n    chai.request(server)\r\n      .post('/api/v1/transactions/0114276912/debit')\r\n      .set('Authorization', `Bearer ${staffToken}`)\r\n      .send(invalidTransaction)\r\n      .end((err, response) => {\r\n        response.should.have.status(403);\r\n        response.body.should.have.property('error');\r\n        response.body.error.should.equal('Insufficient Balance');\r\n      });\r\n    done();\r\n  });\r\n});\r\n"]}