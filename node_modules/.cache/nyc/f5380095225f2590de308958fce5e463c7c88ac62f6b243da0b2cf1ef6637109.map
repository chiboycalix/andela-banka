{"version":3,"sources":["userTest.js"],"names":["dotenv","config","should","chai","use","chaiHttp","describe","it","equal","correctUser","firstName","lastName","email","password","type","isAdmin","token","jwt","sign","id","process","env","SECRET","expiresIn","done","request","server","post","send","end","response","have","status","body","be","a","property","data","userWithoutFirstname","error","userWithoutLastname","userWithoutEmail","userWithInvalidEmail"],"mappings":"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","file":"userTest.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/test","sourcesContent":["/* eslint-disable no-unused-expressions */\n// eslint-disable-next-line no-unused-expressions\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport server from '../app';\n\n\ndotenv.config();\n// eslint-disable-next-line no-unused-vars\nconst should = chai.should();\n\nchai.use(chaiHttp);\n\ndescribe('Demo test', () => {\n  it('This is demo test and actually tests nothing', () => {\n    ('one').should.equal('one');\n  });\n});\n\ndescribe('POST api/v1/auth/signup', () => {\n  const correctUser = {\n    firstName: 'chinonso',\n    lastName: 'calix',\n    email: 'igwechinonso77@gmail.com',\n    password: 1234,\n    type: 'client',\n    isAdmin: false,\n  };\n  const token = jwt.sign({\n    email: correctUser.email,\n    id: correctUser.id,\n    isAdmin: correctUser.isAdmin,\n    type: correctUser.type,\n  }, process.env.SECRET, { expiresIn: '1h' });\n  it('should be able to signup a user with correct details', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', token)\n      .send(correctUser)\n      .end((request, response) => {\n        response.should.have.status(201);\n        response.body.should.be.a('object');\n        response.body.should.have.property('data');\n        response.body.data.should.have.property('token');\n        response.body.data.should.have.property('firstName');\n        response.body.data.should.have.property('lastName');\n        response.body.data.should.have.property('email');\n        response.body.data.should.have.property('password');\n        response.body.data.should.have.property('type');\n        response.body.data.should.have.property('isAdmin');\n        done();\n      });\n  });\n  const userWithoutFirstname = {\n    lastName: 'calix',\n    email: 'igwechinonso77@gmail.com',\n    password: 1234,\n    type: 'client',\n    isAdmin: false,\n  };\n  it('user must provide first name', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', token)\n      .send(userWithoutFirstname)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('firstname is required');\n        done();\n      });\n  });\n\n  const userWithoutLastname = {\n    firstName: 'chinonso',\n    email: 'igwechinonso77@gmail.com',\n    password: 1234,\n    type: 'client',\n    isAdmin: false,\n  };\n  it('user must provide last name', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', token)\n      .send(userWithoutLastname)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('lastname is required');\n        done();\n      });\n  });\n  const userWithoutEmail = {\n    firstName: 'chinonso',\n    lastName: 'calix',\n    password: 1234,\n    type: 'client',\n    isAdmin: false,\n  };\n  it('user must provide email', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', token)\n      .send(userWithoutEmail)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('email is required');\n        done();\n      });\n  });\n  const userWithInvalidEmail = {\n    firstName: 'chinonso',\n    lastName: 'calix',\n    email: 'chi@gmail',\n    password: 1234,\n    type: 'client',\n    isAdmin: false,\n  };\n  it('user must provide email', (done) => {\n    chai.request(server)\n      .post('/api/v1/auth/signup')\n      .send('x-access-token', token)\n      .send(userWithInvalidEmail)\n      .end((request, response) => {\n        response.should.have.status(400);\n        response.body.should.have.property('error');\n        response.body.error.should.equal('Please provide a valid email');\n        done();\n      });\n  });\n});\n"]}