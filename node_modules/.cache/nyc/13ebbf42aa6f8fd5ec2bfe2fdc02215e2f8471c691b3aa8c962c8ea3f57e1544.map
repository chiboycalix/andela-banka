{"version":3,"sources":["signupValidations.js"],"names":["signupValidation","request","response","next","body","firstName","lastName","email","password","pattern","status","json","error","match","isNaN","length"],"mappings":"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","file":"signupValidations.js","sourceRoot":"C:/Users/nono.DESKTOP-OPOSFU3/Desktop/andela-banka/server/middlewares","sourcesContent":["/* eslint-disable no-restricted-globals */\n\nconst signupValidation = (request, response, next) => {\n  const {\n    firstName, lastName, email, password,\n  } = request.body;\n  const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (!firstName) {\n    return response.status(400).json({\n      status: 400,\n      error: 'firstname is required',\n    });\n  }\n  if (!firstName.match(/[^\\s-]/)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Spaces are not allowed',\n    });\n  }\n  if (!isNaN(firstName)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Firstname must be letters',\n    });\n  }\n  if (firstName.length < 2) {\n    return response.status(400).json({\n      status: 400,\n      error: 'first Name must be atleast 3 alphabets',\n    });\n  }\n  if (!lastName) {\n    return response.status(400).json({\n      status: 400,\n      error: 'lastname is required',\n    });\n  }\n  if (!lastName.match(/[^\\s-]/)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Spaces are not allowed',\n    });\n  }\n  if (!isNaN(lastName)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Lastname must be letters',\n    });\n  }\n  if (lastName.length < 2) {\n    return response.status(400).json({\n      status: 400,\n      error: 'last Name must be atleast 3 alphabets',\n    });\n  }\n  if (!email) {\n    return response.status(400).json({\n      status: 400,\n      error: 'email is required',\n    });\n  }\n  if (!email.match(/[^\\s-]/)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Spaces are not allowed',\n    });\n  }\n  if (!email.match(pattern)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Please provide a valid email',\n    });\n  }\n  if (!password) {\n    return response.status(400).json({\n      status: 400,\n      error: 'password is required',\n    });\n  }\n  if (!password.match(/[^\\s-]/)) {\n    return response.status(400).json({\n      status: 400,\n      error: 'Spaces are not allowed',\n    });\n  }\n  next();\n};\n\nexport default signupValidation;\n"]}